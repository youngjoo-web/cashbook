<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdu.cashbook.mapper.MemberMapper">
	<!-- 비밀번호변경
	updateMemberPw
	- 받아오는값 : 기존비밀번호(memberPw1), 바뀔 비밀번호(memberPw2), 비밀번호바꿀회원 아이디(memberId)
	- 실행 : 기존비밀번호 암호화 - 회원아이디와 암호화한 비밀번호 일치하는 데이터 호출 - 바뀔 비밀번호를 암호화 - 기존비밀번호를 바뀔비밀번호로 변경
	-->
	<update id="updateMemberPw" parameterType="java.util.Map">
		UPDATE member 
		SET member_pw = PASSWORD(#{memberPw2})
		WHERE member_id = #{memberId}
		AND member_pw = PASSWORD(#{memberPw1})
	</update>
	<!-- 회원정보 변경
	updateMember
	- 받아오는값 : memberClass
	- 실행 : 입력받은 멤버아이디와 암호화한 비밀번호가 일치하는 튜플 호출 - 입력한값들로 호출된 튜플의 데이터 변경
	 -->
	<update id="updateMember" parameterType="com.gdu.cashbook.vo.Member">
		UPDATE member 
		SET member_name = #{memberName},
			member_addr = #{memberAddr},
			member_phone = #{memberPhone},
			member_email = #{memberEmail},
			member_pic = #{memberPic}
		WHERE member_id = #{memberId}
		AND member_pw = PASSWORD(#{memberPw})
	</update>
	<!-- 아이디 찾기
	selectMemberIdByMember
	- 받아오는값 : 회원이름, 전화번호, 이메일
	- 실행 : 받아온데이터 (이름, 전화번호, 이메일)과 일치하는 튜플 호출 - 호출된 튜플에 회원아이디 데이터를 첫번째글자부터3번째글자까지 출력 - 그뒤에'****'출력
	 -->
	<select id="selectMemberIdByMember" parameterType="com.gdu.cashbook.vo.Member" resultType="String">
		SELECT
			CONCAT(SUBSTRING(member_id, 1, 3), '****')
		FROM member
		WHERE member_name = #{memberName}
		AND member_phone = #{memberPhone}
		AND member_email = #{memberEmail}
	</select>
	<!-- 회원탈퇴
	deleteMember
	- 받아오는값 : 회원아이디와 비밀번호
	- 실행 : 회원아이디와 비밀번호가 일치하는 튜플 삭제 -->
	<delete id="deleteMember" parameterType="com.gdu.cashbook.vo.LoginMember">
		DELETE FROM member
		WHERE member_id = #{memberId}
		AND	member_pw = PASSWORD(#{memberPw})
	</delete>
	<!-- 회원탈퇴
	deleteMemberBook
	- 받아오는값 : 회원아이디와 비밀번호
	- 실행 : 회원아이디와 비밀번호가 일치하는 튜플 삭제 -->
	<delete id="deleteMemberBook" parameterType="com.gdu.cashbook.vo.LoginMember">
		DELETE FROM book
		WHERE member_id = #{memberId}
	</delete>
	<!-- 회원탈퇴
	deleteMemberCash
	- 받아오는값 : 회원아이디와 비밀번호
	- 실행 : 회원아이디와 비밀번호가 일치하는 튜플 삭제 -->
	<delete id="deleteMemberCash" parameterType="com.gdu.cashbook.vo.LoginMember">
		DELETE FROM cash
		WHERE member_id = #{memberId}
	</delete>
	<!-- 회원탈퇴
	deleteMemberComment
	- 받아오는값 : 회원아이디와 비밀번호
	- 실행 : 회원아이디와 비밀번호가 일치하는 튜플 삭제 -->
	<delete id="deleteMemberComment" parameterType="com.gdu.cashbook.vo.LoginMember">
		DELETE FROM comment
		WHERE member_id = #{memberId}
	</delete>
	<!-- 회원정보불러오기
	- 받아오는값 : 회원아이디
	- 실행 : 받아온 회원아이디에 일치하는 튜플 출력 -->
	<select id="selectMemberOne" parameterType="com.gdu.cashbook.vo.LoginMember" resultType="com.gdu.cashbook.vo.Member">
		SELECT
			member_id as memberId,
			member_name as memberName,
			member_addr as memberAddr,
			member_phone as memberPhone,
			member_email as memberEmail,
			member_pic as memberPic
		FROM member
		WHERE member_id = #{memberId}		
	</select>
	<!-- 회원아이디 중복검사
	- 받아오는값 : 회원가입할 아이디
	- 실행 : 멤버테이블의 회원아이디 목록과 탈퇴한회원아이디목록을 결합 - 가입할 회원아이디와 일치하는 튜플 출력 - 출력된 데이터가 있을시 회원가입불가 -->
	<select id="selectMemberId" parameterType="String" resultType="String">
		SELECT
			member_id
		FROM (	SELECT member_id FROM member
				UNION
				SELECT member_id FROM memberid) t
		WHERE member_id = #{memberIdCheck}
	</select>
	<!-- 로그인
	- 받아오는값 : 로그인시도하는 회원아이디와 비밀번호
	- 실행 : 받아온 아이디와 비밀번호가 일치하는 튜플의 회원아이디 출력 - 출력된 데이터 있을시 로그인성공 -->
	<select id="selectLoginMember" parameterType="com.gdu.cashbook.vo.LoginMember" resultType="com.gdu.cashbook.vo.LoginMember">
		SELECT 
			member_id as memberId
		FROM member
		WHERE member_id = #{memberId}
		AND member_pw = PASSWORD(#{memberPw})	
		
	</select>
	<!-- 회원가입
	- 받아오는값 : memberClass
	- 실행 : 받아온값들을 member테이블에 추가 -->
	<insert id="insertMember" parameterType="com.gdu.cashbook.vo.Member">
		INSERT INTO member(
			member_id,
			member_pw,
			member_name,
			member_addr,
			member_phone,
			member_email,
			member_pic
		) VALUES (
			#{memberId},
			PASSWORD(#{memberPw}),
			#{memberName},
			#{memberAddr},
			#{memberPhone},
			#{memberEmail},
			#{memberPic}
		)
	</insert>
</mapper>